% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Session.R
\docType{class}
\name{Session-class}
\alias{Session}
\alias{Session-class}
\title{SB object that encapsulates a session}
\description{
SB object that encapsulates a session
}
\section{Fields}{

\describe{
\item{\code{projectName}}{the name of the project that this Session object is part of}

\item{\code{revision}}{an incremental number assigned to each learning iteration for this project}
}}
\section{Methods}{

\describe{
\item{\code{buildNumber()}}{Returns the build number in which the model was generated.}

\item{\code{cancel()}}{Cancel a queued / running job of this model}

\item{\code{createPackage(sampleData = NULL, createRestAPIpackage = FALSE,
  fileEscaping = TRUE, ...)}}{Create a sharable package for the model. \code{sampleData} can be used to a sample data to the package and test it. Only first 20 rows of the sample data will be used. \code{createRestAPIpackage} is a boolean indicator for whether to create a package for prediction via command line (set to FALSE) or via programmatic REST API call(TRUE).}

\item{\code{enrich(data, featureCount = NA, contextDatasets = NULL,
  enrichedColumnsOnly = TRUE, columnsWhiteList = NA,
  outputName = "enriched", fileEscaping = TRUE, ...)}}{Returns a data frame containing the enrichedData. \code{data} is a dataframe to be enriched. Set \code{featureCount} in order to limit the number of returned features. Set \code{writePredictionColumnsOnly} to TRUE to return only prediction and probabily columns rather than the entire dataset.}

\item{\code{evaluate(...)}}{Returns an evaluation object containing various information on the run including evaluation metric that was used, evaluation score, precision, confusion matrix, number of correct and incorrect instances, AUC information and more.}

\item{\code{features(...)}}{Returns a dataset with top feature information}

\item{\code{initialize(nameOfProject = NA, revisionNumber = NA, artifact_loc = NA,
  modelBuilt = TRUE, jobId = -1)}}{initializes a session using a projectName and revision number.}

\item{\code{liftFromPrediction(predictionResult, overrideDesiredClass = NA,
  title = "test", percentOfPopulationToPlot = 0.2, outputName = "lift",
  fileEscaping = TRUE, ...)}}{Returns lift from a created model and generates three plots. \code{predictionResult} is a dataframe to be analyzed, \code{overrideDesiredClass} the class in the label column to check the lift for (e.g. '1'), \code{title} optional: a title for the plot. \code{percentOfPopulationToPlot} optional: limit the plot to the top percent of the data (x axis).}

\item{\code{predict(data, contextDatasets = NULL, predictionColumnsOnly = TRUE,
  columnsWhiteList = NA, outputName = "predicted", fileEscaping = TRUE,
  ...)}}{Returns prediction on a created model. \code{data} is a dataframe to be predicted. contextDatasets - list of contextObject(s) with context information unique to the prediction (see more information in learn()). Set \code{predictionColumnsOnly} to TRUE to return only prediction and probabily columns rather than the entire dataset.}

\item{\code{reports()}}{Shows all reports applicable for the current analysis.}

\item{\code{revisions()}}{Show previous revisions of a project.}

\item{\code{showConfusionMatrix(normalized = FALSE)}}{Shows a confusion matrix of a model.}

\item{\code{showContextObjects()}}{Shows context objects report.}

\item{\code{showExtractors()}}{Shows extractors.}

\item{\code{showFeatureClusters()}}{Shows the representative feature clusters pdf report.}

\item{\code{showFeatureStability()}}{Shows features stability report.}

\item{\code{showFeaturesTest()}}{Shows features performance on test.}

\item{\code{showFeaturesTrain()}}{Shows features performance on train.}

\item{\code{showFields()}}{Shows fields.}

\item{\code{showFunctions()}}{Shows functions.}

\item{\code{showInputSchema()}}{Shows the input schema.}

\item{\code{showModelComparison()}}{Shows cross validation of various algorithms tested to create a model.}

\item{\code{showReport(report_name = NA)}}{\code{report_name} name of report to show}

\item{\code{status(...)}}{Checking the status of the session.}

\item{\code{waitForProcess(...)}}{Blocking the R console until session is finished.}

\item{\code{webView(show = TRUE)}}{Show a dynamic web view of the analysis.}
}}
\examples{
# Learning example
\donttest{
# Create a Session object from scratch
session = Session("project name", revision_id)
# Learn
session = learn("titanic", getData("titanic_train"), target="survived")
# Enrich
enriched = session$enrich(getData("titanic_train"), featureCount = 10)
colnames(enriched)
# Predict
predicted = session$predict(getData("titanic_test"))
colnames(predicted)
predicted[1:5,c("survived_predicted", "probability_0", "probability_1")]
#Evaluate
eval = session$evaluate()
#Show reports
session$reports()
session$showFeaturesTrain()
session$showConfusionMatrix()
}
}

